#!/bin/bash

set -eo pipefail

#
# This script deploys the build artifact to Pantheon.
# On the master branch the dev environment is used.
# Otherwise a multidev environment is used.
#

# -----------------------------------------------------------------------------
# Set up environment
# See: https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment

CI_BRANCH=${CI_BRANCH:-$BUILD_SOURCEBRANCHNAME}
CI_BUILD_NUMBER=${CI_BUILD_NUMBER:-$BUILD_BUILDID}
CI_PROJECT_NAME=${CI_PROJECT_NAME:-$BUILD_REPOSITORY_NAME}

# Circle sets both $CIRCLE_PULL_REQUEST and $CI_PULL_REQUEST.
PR_NUMBER=${PR_NUMBER:-$SYSTEM_PULLREQUEST_PULLREQUESTID}
PR_NUMBER=${PR_NUMBER##*/}

# Set up BASH_ENV if it was not set for us.
BASH_ENV=${BASH_ENV:-$HOME/.bashrc}

# Provide a default email address
GIT_EMAIL=${GIT_EMAIL:-$BUILD_REQUESTEDFOREMAIL}
GIT_NAME=${GIT_NAME:-$BUILD_REQUESTEDFORID}

# We will also set the default site name to be the same as the repository name.
DEFAULT_SITE=${DEFAULT_SITE:-$CI_PROJECT_NAME}
# By default, we will make the main branch master.
DEFAULT_BRANCH=${DEFAULT_BRANCH:-master}

# If we are on the default branch.
if [[ ${CI_BRANCH} == ${DEFAULT_BRANCH} ]] ; then
  # Use dev as the environment.
	DEFAULT_ENV=${DEFAULT_ENV:-dev}
else
  # Otherwise, name the environment after the CI build number.
	DEFAULT_ENV=ci-$CI_BUILD_NUMBER
fi

# If there is a PR number provided, though, then we will use it instead.
if [[ -n ${PR_NUMBER} ]] ; then
  DEFAULT_ENV="pr-${PR_NUMBER}"
fi

CI_PR_URL=${CI_PR_URL:-$CIRCLE_PULL_REQUEST}
CI_PROJECT_USERNAME=${CI_PROJECT_USERNAME:-$BUILD_REQUESTEDFORID}
CI_PROJECT_REPONAME=${CI_PROJECT_REPONAME:-$BUILD_REPOSITORY_NAME}
TERMINUS_SITE=${TERMINUS_SITE:-$DEFAULT_SITE}
TERMINUS_ENV=${TERMINUS_ENV:-$DEFAULT_ENV}

# End of environment section
# -----------------------------------------------------------------------------


# Prepare for Pantheon
composer run prepare-for-pantheon

if [[ $CI_BRANCH != $DEFAULT_BRANCH ]]
then
  # Create a new multidev environment (or push to an existing one)
  $TERMINUS -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes
else
  # Push to the dev environment
  $TERMINUS -n build:env:push "$TERMINUS_SITE.dev" --yes
fi

# Update the Drupal database
$TERMINUS -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- updatedb -y

# If exported configuration is available, then import it.
if [ -f "config/system.site.yml" ] ; then
  $TERMINUS -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- config-import --yes
fi

# Clear Drupal cache
$TERMINUS -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- cr

# Clear the environment cache
$TERMINUS -n env:clear-cache $TERMINUS_SITE.$TERMINUS_ENV

# Ensure secrets are set
$TERMINUS -n secrets:set "$TERMINUS_SITE.$TERMINUS_ENV" token "$DEVOPS_TOKEN" --file='devops-secrets.json' --clear --skip-if-empty

# Delete old multidev environments associated
# with a PR that has been merged or closed.
# TODO: Make this work for Azure DevOps
#$TERMINUS -n build:env:delete:pr $TERMINUS_SITE --yes
