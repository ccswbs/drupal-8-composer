# Build, test, and deploy the content hub.
# See: https://docs.microsoft.com/azure/devops/pipelines/languages/php
#=========================================================================
# In addition to the environment variables defined in this file, also
# add the following variables in the Azure Pipelines UI.
#
# See: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
#
# TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
# TERMINUS_TOKEN: The Pantheon machine token
# DEVOPS_TOKEN:   The Azure DevOps personal access token
# GIT_EMAIL:      The email address to use when making commits
#
# TEST_SITE_NAME: The name of the test site to provide when installing.
# ADMIN_PASSWORD: The admin password to use when installing.
# ADMIN_EMAIL:    The email address to give the admin when installing.
#=========================================================================

variables:
  phpVersion: 7.2
  MY_DEVOP_TOKEN: $(devops.token)
  MY_DEVOP_URL: $(System.TeamFoundationCollectionUri)
  MY_DEVOP_PROJ: $(System.TeamProject)

pool:
  vmImage: 'Ubuntu 16.04'

steps:

# Setup and Deploy

- script: ./.ci/env/set
  displayName: 'Initialize build environment'

- script: ./.ci/test/static/run
  displayName: 'Static tests'

- script: ./.ci/build/php
  displayName: 'Build PHP'

#- script: ./.ci/deploy/pantheon/dev-multidev
#displayName: 'Deploy to Pantheon'

- script: |
    git config user.name '$(Build.RequestedFor)'
    git config user.email '$(Build.RequestedForEmail)'
    git add --force -A .
    git commit -m 'Build $(Build.BuildId)'
    git push --force https://$(pat)@github.com/ccswbs/drupal-8-composer.git HEAD:master
  displayName: 'Push to upstream'

# Behat Tests

- script: ./.ci/test/behat/initialize
  displayName: 'Initialize Behat tests'

- script: ./.ci/test/behat/run
  displayName: 'Run Behat tests'

- script: ./.ci/test/behat/cleanup
  displayName: 'Clean up Behat tests'
  condition: always()

- task: PublishTestResults@2
  displayName: 'Publish Behat test results'
  condition: always()
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testRunTitle: 'Behat Test Results'
    testResultsFiles: '$(Common.TestResultsDirectory)/*' 

- task: CopyFiles@2
  displayName: "Copy Behat screenshots to Artifacts Directory"
  condition: failed()
  inputs:
      sourceFolder: 'var/behat_screenshots'
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Behat screenshots to Artifacts Directory'
  condition: failed()
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: BehatTestFailureScreenshots

# Visual Regression Tests

- script: ./.ci/test/visual-regression/run
  displayName: 'Visual regression test'

- bash: |
    if [ -d backstop_data ]; then
      echo "##vso[task.setVariable variable=BACKSTOP_DATA_EXISTS]true"
    fi
  displayName: 'Check if BackstopJS test results exist'

- task: PublishTestResults@2
  displayName: 'Publish BackstopJS test results'
  condition: eq(variables.BACKSTOP_DATA_EXISTS, 'true')
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: 'backstop_data/ci_report/*' 
    testRunTitle: 'BackstopJS Test Results'

- task: CopyFiles@2
  displayName: "Copy BackstopJS screenshots to Artifacts Directory"
  condition: eq(variables.BACKSTOP_DATA_EXISTS, 'true')
  inputs:
      sourceFolder: 'backstop_data'
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish BackstopJS screenshots to Artifacts Directory'
  condition: eq(variables.BACKSTOP_DATA_EXISTS, 'true')
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: BackstopJSTestScreenshots

# Composer Lock Updater

- script: true
  displayName: 'Composer lock updater'

# Clean up

- script: ./.ci/env/clean
  displayName: 'Clean up build environment'
  condition: always()
