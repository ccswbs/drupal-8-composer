# Build, test, and deploy the content hub.
# See: https://docs.microsoft.com/azure/devops/pipelines/languages/php
#=========================================================================
# In addition to the environment variables defined in this file, also
# add the following variables in the Azure Pipelines UI.
#
# See: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
#
# TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
# TERMINUS_TOKEN: The Pantheon machine token
# DEVOPS_TOKEN:   The Azure DevOps personal access token
# GIT_EMAIL:      The email address to use when making commits
#
# TEST_SITE_NAME: The name of the test site to provide when installing.
# ADMIN_PASSWORD: The admin password to use when installing.
# ADMIN_EMAIL:    The email address to give the admin when installing.
#=========================================================================

variables:
  phpVersion: 7.2
  TestQAUsername: $(test.site.username)
  TestQAPassword: $(test.site.password)
  # (TODO) Use variables to access Azure Key Vault once available
  # _service_keyvault: $(ServiceKeyvault)
  # _service_connection: $(ServiceConnection)
  MY_DEVOP_TOKEN: $(devops.token)
  MY_DEVOP_URL: $(System.TeamFoundationCollectionUri)
  MY_DEVOP_PROJ: $(System.TeamProject)
  DIR_TERMINUS: $(Pipeline.Workspace)/.terminus
  DIR_DRUSH: /usr/local/bin/drush
  RUN_TESTS: $(run.tests)

pr:
- develop
- master

pool:
  vmImage: 'Ubuntu 16.04'

steps:

- checkout: self
  persistCredentials: true

# Cache drush
# - task: CacheBeta@1
#   inputs:
#     key: 'drush_cache | "$(Agent.OS)" | "$(Build.SourceBranch)" | "$(terminus.site)"'
#     path: $(DIR_DRUSH)
#   displayName: 'Retrieve cached drush'

# Cache terminus
# - task: CacheBeta@1
#   inputs:
#     key: 'terminus_cache | "$(Agent.OS)" | "$(Build.SourceBranch)" | "$(terminus.site)"'
#     path: $(DIR_TERMINUS)
#   displayName: 'Retrieve cached terminus'

- script: ./.ci/env/set
  displayName: 'Initialize build environment'

- script: ./.ci/env/set-tests
  displayName: 'Initialize test environment'
  condition: eq(variables.RUN_TESTS, 'true')

# Run Static Tests
- script: ./.ci/test/static/run
  displayName: 'Static tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

# Build Assets (Composer Install)
- script: ./.ci/build/php
  displayName: 'Build PHP'

- script: ./.ci/deploy/pantheon/dev-multidev
  displayName: 'Deploy to Pantheon'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

# Run Selenium Tests
- task: NuGetAuthenticate@0
  displayName: '[Selenium] Authenticate to get packages'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    nuGetServiceConnections: DrupalTestServiceConnection

- task: DotNetCoreCLI@2
  displayName: '[Selenium] Restore packages'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    command: restore
    projects: '$(Build.SourcesDirectory)/tests/selenium/**/*.csproj'
    feedsToUse: select
    vstsFeed: 'CCS/DrupalTest'
    includeNuGetOrg: true

# (TODO) Use Azure Key Vault once available
# - task: AzureKeyVault@1
#   inputs:
#     azureSubscription: $(_service_connection)
#     keyVaultName: $(_service_keyvault)
#     secretsFilter: 'BoveyQAUsername, BoveyQAPassword'

# File transform
- task: FileTransform@1
  displayName: '[Selenium] Replace site-specific tokens in appsettings.json'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    folderPath: '$(Build.SourcesDirectory)/tests/selenium/BoveyTest'
    fileType: json
    targetFiles: appsettings.json

- task: DotNetCoreCLI@2
  displayName: '[Selenium] Run tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    command: test
    projects: '$(Build.SourcesDirectory)/tests/selenium/**/*.csproj'
    publishTestResults: true

# Behat Tests
- script: ./.ci/test/behat/initialize
  displayName: '[Behat] Initialize tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

- script: ./.ci/test/behat/run
  displayName: '[Behat] Run tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

- script: ./.ci/test/behat/cleanup
  displayName: '[Behat] Clean up tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

- task: PublishTestResults@2
  displayName: '[Behat] Publish results'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testRunTitle: 'Behat Test Results'
    testResultsFiles: '$(Common.TestResultsDirectory)/*' 

- task: CopyFiles@2
  displayName: "[Behat] Copy screenshots to Artifacts Directory"
  condition: and(failed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
      sourceFolder: 'var/behat_screenshots'
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: '[Behat] Publish screenshots to Artifacts Directory'
  condition: and(failed(), eq(variables.RUN_TESTS, 'true'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: BehatTestFailureScreenshots

# Visual Regression Tests
- script: ./.ci/test/visual-regression/run
  displayName: '[BackstopJS] Run visual regression tests'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

- bash: |
    if [ -d backstop_data ]; then
      echo "##vso[task.setVariable variable=BACKSTOP_DATA_EXISTS]true"
    fi
  displayName: '[BackstopJS] Check if test results exist'
  condition: and(succeededOrFailed(), eq(variables.RUN_TESTS, 'true'))

- task: PublishTestResults@2
  displayName: '[BackstopJS] Publish test results'
  condition: and(succeededOrFailed(),eq(variables.BACKSTOP_DATA_EXISTS, 'true'),eq(variables.RUN_TESTS, 'true'))
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: 'backstop_data/ci_report/*' 
    testRunTitle: 'BackstopJS Test Results'

- task: CopyFiles@2
  displayName: "[BackstopJS] Copy screenshots to Artifacts Directory"
  condition: and(succeededOrFailed(),eq(variables.BACKSTOP_DATA_EXISTS, 'true'),eq(variables.RUN_TESTS, 'true'))
  inputs:
      sourceFolder: 'backstop_data'
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: '[BackstopJS] Publish screenshots to Artifacts Directory'
  condition: and(succeededOrFailed(),eq(variables.BACKSTOP_DATA_EXISTS, 'true'),eq(variables.RUN_TESTS, 'true'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: BackstopJSTestScreenshots

# Composer Lock Updater
- script: true
  displayName: 'Composer lock updater'

# Deploy to Upstream
- script: |
    git config user.name '$(Build.RequestedFor)'
    git config user.email '$(Build.RequestedForEmail)'
    git add --force -A .
    git commit -m 'Build $(Build.BuildId)'
    git push --force https://$(pat)@github.com/ccswbs/drupal-8-composer.git HEAD:master
  displayName: 'Push to upstream'
  condition: and(succeeded(),eq(variables['Build.SourceBranch'],'refs/heads/develop'))

# Clean up
- script: ./.ci/env/clean
  displayName: 'Clean up build environment'
  condition: always()
